import random

word_list = {"gitam", "ashrith", "computer", "laptop", "artificial", "intelligence", "master", "student"}

MAX_ATTEMPTS = 6

HANGMAN_PICS = [
    """
       ------
       |    |
            |
            |
            |
            |
    =========
    """,
    """
       ------
       |    |
       O    |
            |
            |
            |
    =========
    """,
    """
       ------
       |    |
       O    |
       |    |
            |
            |
    =========
    """,
    """
       ------
       |    |
       O    |
      /|    |
            |
            |
    =========
    """,
    """
       ------
       |    |
       O    |
      /|\\   |
            |
            |
    =========
    """,
    """
       ------
       |    |
       O    |
      /|\\   |
      /     |
            |
    =========
    """,
    """
       ------
       |    |
       O    |
      /|\\   |
      / \\   |
            |
    =========
    """
]

class HangmanGame:
    def __init__(self, secret_word):
        self.secret_word = secret_word
        self.word_length = len(secret_word)
        self.current_guess = ['_'] * self.word_length
        self.attempts = 0
        self.given_letters = set()
        self.wrong_guesses = 0  

    def give_hint(self):
        available_letters = [letter for letter in self.secret_word if letter not in self.given_letters]
        if available_letters:
            hint_letter = random.choice(available_letters)
            self.given_letters.add(hint_letter)
            return hint_letter
        return None  

    def make_guess(self, guessed_positions):
        temp_word = list(self.current_guess)
        for letter, position in guessed_positions:
            if 0 <= position < self.word_length and self.secret_word[position] == letter:
                temp_word[position] = letter

        if "_" not in temp_word and ''.join(temp_word) in word_list:
            self.current_guess = temp_word
            return True

        self.attempts += 1
        self.wrong_guesses += 1  
        return False

    def check_game_status(self):
        if "_" not in self.current_guess:
            return "P2 Wins! Successfully formed the word."
        if self.wrong_guesses >= MAX_ATTEMPTS:
            return f"P1 Wins! The word was '{self.secret_word}'."
        if len(self.given_letters) == 0 and self.attempts < MAX_ATTEMPTS:
            return "P2 Wins by default! No body parts identified."
        return None

    def display_hangman(self):
        print(HANGMAN_PICS[self.wrong_guesses])

def play_hangman():
    secret_word = random.choice(list(word_list))
    game = HangmanGame(secret_word)

    print(f"Game started! Word Length: {game.word_length}")

    while True:
        hint_letter = game.give_hint()
        print(f"P1 gives hint: {hint_letter}")
        
        available_positions = [i for i, char in enumerate(game.current_guess) if char == '_']
        guessed_positions = [(hint_letter, random.choice(available_positions))]

        if game.make_guess(guessed_positions):
            print("P2 successfully placed letters:", ' '.join(game.current_guess))
        else:
            print("Incorrect guess!")
            game.display_hangman()

        status = game.check_game_status()
        if status:
            print(status)
            break

        print("Current word state:", ' '.join(game.current_guess), "| Attempts:", game.attempts)

play_hangman()
