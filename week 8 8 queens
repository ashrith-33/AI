import random

N = 8

def calculate_conflicts(board):
    conflicts = 0
    for i in range(N):
        for j in range(i + 1, N):
            if board[i] == board[j] or abs(board[i] - board[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def get_best_move(board):
    best_board = list(board)
    best_conflicts = calculate_conflicts(board)
    
    for row in range(N):
        original_col = board[row]
        for col in range(N):
            if col == original_col:
                continue  
            board[row] = col
            conflicts = calculate_conflicts(board)
            if conflicts < best_conflicts:
                best_conflicts = conflicts
                best_board = list(board)
        board[row] = original_col  
    return best_board, best_conflicts

def hill_climbing():
    attempts = 100  
    for _ in range(attempts):
        board = [random.randint(0, N - 1) for _ in range(N)]
        while True:
            new_board, new_conflicts = get_best_move(board)
            if new_conflicts == 0:
                return new_board  
            if new_board == board:  
                break  
            board = new_board  
    return None  

def print_solution(board):
    if board is None:
        print("No solution found after multiple attempts.")
        return

    for row in range(N):
        line = ["." for _ in range(N)]
        line[board[row]] = "Q"
        print(" ".join(line))
    print("-" * 20)

solution = hill_climbing()
print("Final Solution:")
print_solution(solution)
